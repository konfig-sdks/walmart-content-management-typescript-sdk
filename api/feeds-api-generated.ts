/* tslint:disable */
/* eslint-disable */
/*
Content Management

The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FeedsCreateContentFeedRequest } from '../models';
// @ts-ignore
import { FeedsCreateContentFeedResponse } from '../models';
// @ts-ignore
import { FeedsCreateRichMediaFeedResponse } from '../models';
// @ts-ignore
import { FeedsDisplayItemStatusResponse } from '../models';
// @ts-ignore
import { FeedsGetFeedStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB to ensure optimal feed processing time.
         * @summary Content feeds
         * @param {string} feedType The feed Type
         * @param {string} wmQosCorrelationId A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wmSvcName Walmart Service Name
         * @param {string} wmSecTimestamp The Epoch timestamp
         * @param {string} wmSecAuthSignature The vendor\&#39;s digital signature, generated by running the JAR file or custom generation code
         * @param {string} wmConsumerId A unique ID required to access the API
         * @param {Uint8Array | File | buffer.File} file Feed file to upload
         * @param {string} [wmConsumerChannelType] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {FeedsCreateContentFeedRequest} [feedsCreateContentFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentFeed: async (feedType: string, wmQosCorrelationId: string, wmSvcName: string, wmSecTimestamp: string, wmSecAuthSignature: string, wmConsumerId: string, file: Uint8Array | File | buffer.File, wmConsumerChannelType?: string, feedsCreateContentFeedRequest?: FeedsCreateContentFeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedType' is not null or undefined
            assertParamExists('createContentFeed', 'feedType', feedType)
            // verify required parameter 'wmQosCorrelationId' is not null or undefined
            assertParamExists('createContentFeed', 'wmQosCorrelationId', wmQosCorrelationId)
            // verify required parameter 'wmSvcName' is not null or undefined
            assertParamExists('createContentFeed', 'wmSvcName', wmSvcName)
            // verify required parameter 'wmSecTimestamp' is not null or undefined
            assertParamExists('createContentFeed', 'wmSecTimestamp', wmSecTimestamp)
            // verify required parameter 'wmSecAuthSignature' is not null or undefined
            assertParamExists('createContentFeed', 'wmSecAuthSignature', wmSecAuthSignature)
            // verify required parameter 'wmConsumerId' is not null or undefined
            assertParamExists('createContentFeed', 'wmConsumerId', wmConsumerId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createContentFeed', 'file', file)
            const localVarPath = `/v3/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication clientId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "clientId", keyParamName: "clientId", configuration })
            // authentication privateKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "privateKey", keyParamName: "privateKey", configuration })
            if (feedType !== undefined) {
                localVarQueryParameter['feedType'] = feedType;
            }

            if (wmConsumerChannelType != null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wmConsumerChannelType);
            }

            if (wmQosCorrelationId != null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wmQosCorrelationId);
            }

            if (wmSvcName != null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wmSvcName);
            }

            if (wmSecTimestamp != null) {
                localVarHeaderParameter['WM_SEC.TIMESTAMP'] = String(wmSecTimestamp);
            }

            if (wmSecAuthSignature != null) {
                localVarHeaderParameter['WM_SEC.AUTH_SIGNATURE'] = String(wmSecAuthSignature);
            }

            if (wmConsumerId != null) {
                localVarHeaderParameter['WM_CONSUMER.ID'] = String(wmConsumerId);
            }


            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: feedsCreateContentFeedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v3/feeds',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rich Media includes material such as videos, comparison tables, and view360 media which is item-specific.
         * @summary Rich Media
         * @param {string} feedType The feed Type
         * @param {string} wmQosCorrelationId A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wmSvcName Walmart Service Name
         * @param {string} wmSecTimestamp The Epoch timestamp
         * @param {string} wmSecAuthSignature The vendor\&#39;s digital signature, generated by running the JAR file or custom generation code
         * @param {string} wmConsumerId A unique ID required to access the API
         * @param {string} body 
         * @param {string} [wmConsumerChannelType] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRichMediaFeed: async (feedType: string, wmQosCorrelationId: string, wmSvcName: string, wmSecTimestamp: string, wmSecAuthSignature: string, wmConsumerId: string, body: string, wmConsumerChannelType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedType' is not null or undefined
            assertParamExists('createRichMediaFeed', 'feedType', feedType)
            // verify required parameter 'wmQosCorrelationId' is not null or undefined
            assertParamExists('createRichMediaFeed', 'wmQosCorrelationId', wmQosCorrelationId)
            // verify required parameter 'wmSvcName' is not null or undefined
            assertParamExists('createRichMediaFeed', 'wmSvcName', wmSvcName)
            // verify required parameter 'wmSecTimestamp' is not null or undefined
            assertParamExists('createRichMediaFeed', 'wmSecTimestamp', wmSecTimestamp)
            // verify required parameter 'wmSecAuthSignature' is not null or undefined
            assertParamExists('createRichMediaFeed', 'wmSecAuthSignature', wmSecAuthSignature)
            // verify required parameter 'wmConsumerId' is not null or undefined
            assertParamExists('createRichMediaFeed', 'wmConsumerId', wmConsumerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createRichMediaFeed', 'body', body)
            const localVarPath = `/v2/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "clientId", keyParamName: "clientId", configuration })
            // authentication privateKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "privateKey", keyParamName: "privateKey", configuration })
            if (feedType !== undefined) {
                localVarQueryParameter['feedType'] = feedType;
            }

            if (wmConsumerChannelType != null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wmConsumerChannelType);
            }

            if (wmQosCorrelationId != null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wmQosCorrelationId);
            }

            if (wmSvcName != null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wmSvcName);
            }

            if (wmSecTimestamp != null) {
                localVarHeaderParameter['WM_SEC.TIMESTAMP'] = String(wmSecTimestamp);
            }

            if (wmSecAuthSignature != null) {
                localVarHeaderParameter['WM_SEC.AUTH_SIGNATURE'] = String(wmSecAuthSignature);
            }

            if (wmConsumerId != null) {
                localVarHeaderParameter['WM_CONSUMER.ID'] = String(wmConsumerId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/feeds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can display an item status for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed status
         * @param {string} feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
         * @param {string} wmQosCorrelationId A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wmSvcName Walmart Service Name
         * @param {string} wmSecTimestamp The Epoch timestamp
         * @param {string} wmSecAuthSignature The vendor\&#39;s digital signature, generated by running the JAR file or custom generation code
         * @param {string} wmConsumerId A unique ID required to access the API
         * @param {string} [offset] The object response to the starting number, where 0 is the first entity that can be requested.
         * @param {string} [limit] The number of entities to be returned. Maximum 20 entities.
         * @param {string} [wmConsumerChannelType] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayItemStatus: async (feedId: string, wmQosCorrelationId: string, wmSvcName: string, wmSecTimestamp: string, wmSecAuthSignature: string, wmConsumerId: string, offset?: string, limit?: string, wmConsumerChannelType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('displayItemStatus', 'feedId', feedId)
            // verify required parameter 'wmQosCorrelationId' is not null or undefined
            assertParamExists('displayItemStatus', 'wmQosCorrelationId', wmQosCorrelationId)
            // verify required parameter 'wmSvcName' is not null or undefined
            assertParamExists('displayItemStatus', 'wmSvcName', wmSvcName)
            // verify required parameter 'wmSecTimestamp' is not null or undefined
            assertParamExists('displayItemStatus', 'wmSecTimestamp', wmSecTimestamp)
            // verify required parameter 'wmSecAuthSignature' is not null or undefined
            assertParamExists('displayItemStatus', 'wmSecAuthSignature', wmSecAuthSignature)
            // verify required parameter 'wmConsumerId' is not null or undefined
            assertParamExists('displayItemStatus', 'wmConsumerId', wmConsumerId)
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "clientId", keyParamName: "clientId", configuration })
            // authentication privateKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "privateKey", keyParamName: "privateKey", configuration })
            if (feedId !== undefined) {
                localVarQueryParameter['feedId'] = feedId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (wmConsumerChannelType != null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wmConsumerChannelType);
            }

            if (wmQosCorrelationId != null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wmQosCorrelationId);
            }

            if (wmSvcName != null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wmSvcName);
            }

            if (wmSecTimestamp != null) {
                localVarHeaderParameter['WM_SEC.TIMESTAMP'] = String(wmSecTimestamp);
            }

            if (wmSecAuthSignature != null) {
                localVarHeaderParameter['WM_SEC.AUTH_SIGNATURE'] = String(wmSecAuthSignature);
            }

            if (wmConsumerId != null) {
                localVarHeaderParameter['WM_CONSUMER.ID'] = String(wmConsumerId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/feeds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can display the status of all items for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed item status
         * @param {string} feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
         * @param {string} wmQosCorrelationId A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wmSvcName Walmart Service Name
         * @param {string} wmSecTimestamp The Epoch timestamp
         * @param {string} wmSecAuthSignature The vendor\&#39;s digital signature, generated by running the JAR file or custom generation code
         * @param {string} wmConsumerId A unique ID required to access the API
         * @param {string} [includeDetails] Includes details of each entity in the feed. Do not set this parameter to true.
         * @param {string} [offset] The object response to the starting number, where 0 is the first entity that can be requested.
         * @param {string} [limit] The number of entities to be returned. Maximum 20 entities.
         * @param {string} [wmConsumerChannelType] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedStatus: async (feedId: string, wmQosCorrelationId: string, wmSvcName: string, wmSecTimestamp: string, wmSecAuthSignature: string, wmConsumerId: string, includeDetails?: string, offset?: string, limit?: string, wmConsumerChannelType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getFeedStatus', 'feedId', feedId)
            // verify required parameter 'wmQosCorrelationId' is not null or undefined
            assertParamExists('getFeedStatus', 'wmQosCorrelationId', wmQosCorrelationId)
            // verify required parameter 'wmSvcName' is not null or undefined
            assertParamExists('getFeedStatus', 'wmSvcName', wmSvcName)
            // verify required parameter 'wmSecTimestamp' is not null or undefined
            assertParamExists('getFeedStatus', 'wmSecTimestamp', wmSecTimestamp)
            // verify required parameter 'wmSecAuthSignature' is not null or undefined
            assertParamExists('getFeedStatus', 'wmSecAuthSignature', wmSecAuthSignature)
            // verify required parameter 'wmConsumerId' is not null or undefined
            assertParamExists('getFeedStatus', 'wmConsumerId', wmConsumerId)
            const localVarPath = `/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId !== undefined ? feedId : `-feedId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "clientId", keyParamName: "clientId", configuration })
            // authentication privateKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "privateKey", keyParamName: "privateKey", configuration })
            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (wmConsumerChannelType != null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wmConsumerChannelType);
            }

            if (wmQosCorrelationId != null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wmQosCorrelationId);
            }

            if (wmSvcName != null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wmSvcName);
            }

            if (wmSecTimestamp != null) {
                localVarHeaderParameter['WM_SEC.TIMESTAMP'] = String(wmSecTimestamp);
            }

            if (wmSecAuthSignature != null) {
                localVarHeaderParameter['WM_SEC.AUTH_SIGNATURE'] = String(wmSecAuthSignature);
            }

            if (wmConsumerId != null) {
                localVarHeaderParameter['WM_CONSUMER.ID'] = String(wmConsumerId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/feeds/{feedId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedsApiAxiosParamCreator(configuration)
    return {
        /**
         * You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB to ensure optimal feed processing time.
         * @summary Content feeds
         * @param {FeedsApiCreateContentFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContentFeed(requestParameters: FeedsApiCreateContentFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedsCreateContentFeedResponse>> {
            const feedsCreateContentFeedRequest: FeedsCreateContentFeedRequest = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContentFeed(requestParameters.feedType, requestParameters.wmQosCorrelationId, requestParameters.wmSvcName, requestParameters.wmSecTimestamp, requestParameters.wmSecAuthSignature, requestParameters.wmConsumerId, requestParameters.file, requestParameters.wmConsumerChannelType, feedsCreateContentFeedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rich Media includes material such as videos, comparison tables, and view360 media which is item-specific.
         * @summary Rich Media
         * @param {FeedsApiCreateRichMediaFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRichMediaFeed(requestParameters: FeedsApiCreateRichMediaFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedsCreateRichMediaFeedResponse>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRichMediaFeed(requestParameters.feedType, requestParameters.wmQosCorrelationId, requestParameters.wmSvcName, requestParameters.wmSecTimestamp, requestParameters.wmSecAuthSignature, requestParameters.wmConsumerId, body, requestParameters.wmConsumerChannelType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can display an item status for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed status
         * @param {FeedsApiDisplayItemStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async displayItemStatus(requestParameters: FeedsApiDisplayItemStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedsDisplayItemStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.displayItemStatus(requestParameters.feedId, requestParameters.wmQosCorrelationId, requestParameters.wmSvcName, requestParameters.wmSecTimestamp, requestParameters.wmSecAuthSignature, requestParameters.wmConsumerId, requestParameters.offset, requestParameters.limit, requestParameters.wmConsumerChannelType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can display the status of all items for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed item status
         * @param {FeedsApiGetFeedStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedStatus(requestParameters: FeedsApiGetFeedStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedsGetFeedStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedStatus(requestParameters.feedId, requestParameters.wmQosCorrelationId, requestParameters.wmSvcName, requestParameters.wmSecTimestamp, requestParameters.wmSecAuthSignature, requestParameters.wmConsumerId, requestParameters.includeDetails, requestParameters.offset, requestParameters.limit, requestParameters.wmConsumerChannelType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedsApiFp(configuration)
    return {
        /**
         * You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB to ensure optimal feed processing time.
         * @summary Content feeds
         * @param {FeedsApiCreateContentFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentFeed(requestParameters: FeedsApiCreateContentFeedRequest, options?: AxiosRequestConfig): AxiosPromise<FeedsCreateContentFeedResponse> {
            return localVarFp.createContentFeed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rich Media includes material such as videos, comparison tables, and view360 media which is item-specific.
         * @summary Rich Media
         * @param {FeedsApiCreateRichMediaFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRichMediaFeed(requestParameters: FeedsApiCreateRichMediaFeedRequest, options?: AxiosRequestConfig): AxiosPromise<FeedsCreateRichMediaFeedResponse> {
            return localVarFp.createRichMediaFeed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You can display an item status for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed status
         * @param {FeedsApiDisplayItemStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayItemStatus(requestParameters: FeedsApiDisplayItemStatusRequest, options?: AxiosRequestConfig): AxiosPromise<FeedsDisplayItemStatusResponse> {
            return localVarFp.displayItemStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You can display the status of all items for a specific feed ID. Use the feed ID returned from the upload an item feed API.
         * @summary Feed item status
         * @param {FeedsApiGetFeedStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedStatus(requestParameters: FeedsApiGetFeedStatusRequest, options?: AxiosRequestConfig): AxiosPromise<FeedsGetFeedStatusResponse> {
            return localVarFp.getFeedStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContentFeed operation in FeedsApi.
 * @export
 * @interface FeedsApiCreateContentFeedRequest
 */
export type FeedsApiCreateContentFeedRequest = {
    
    /**
    * The feed Type
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly feedType: string
    
    /**
    * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmQosCorrelationId: string
    
    /**
    * Walmart Service Name
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmSvcName: string
    
    /**
    * The Epoch timestamp
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmSecTimestamp: string
    
    /**
    * The vendor\'s digital signature, generated by running the JAR file or custom generation code
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmSecAuthSignature: string
    
    /**
    * A unique ID required to access the API
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmConsumerId: string
    
    /**
    * Feed file to upload
    * @type {Uint8Array | File | buffer.File}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
    * @type {string}
    * @memberof FeedsApiCreateContentFeed
    */
    readonly wmConsumerChannelType?: string
    
} & FeedsCreateContentFeedRequest

/**
 * Request parameters for createRichMediaFeed operation in FeedsApi.
 * @export
 * @interface FeedsApiCreateRichMediaFeedRequest
 */
export type FeedsApiCreateRichMediaFeedRequest = {
    /**
    * The feed Type
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly feedType: string
    /**
    * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmQosCorrelationId: string
    /**
    * Walmart Service Name
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmSvcName: string
    /**
    * The Epoch timestamp
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmSecTimestamp: string
    /**
    * The vendor\'s digital signature, generated by running the JAR file or custom generation code
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmSecAuthSignature: string
    /**
    * A unique ID required to access the API
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmConsumerId: string
    /**
    * 
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly requestBody: string
    /**
    * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
    * @type {string}
    * @memberof FeedsApiCreateRichMediaFeed
    */
    readonly wmConsumerChannelType?: string
}

/**
 * Request parameters for displayItemStatus operation in FeedsApi.
 * @export
 * @interface FeedsApiDisplayItemStatusRequest
 */
export type FeedsApiDisplayItemStatusRequest = {
    
    /**
    * A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: \'...3456@789...\' must be entered in the URL as \'...3456%40789).
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly feedId: string
    
    /**
    * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmQosCorrelationId: string
    
    /**
    * Walmart Service Name
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmSvcName: string
    
    /**
    * The Epoch timestamp
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmSecTimestamp: string
    
    /**
    * The vendor\'s digital signature, generated by running the JAR file or custom generation code
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmSecAuthSignature: string
    
    /**
    * A unique ID required to access the API
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmConsumerId: string
    
    /**
    * The object response to the starting number, where 0 is the first entity that can be requested.
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly offset?: string
    
    /**
    * The number of entities to be returned. Maximum 20 entities.
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly limit?: string
    
    /**
    * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
    * @type {string}
    * @memberof FeedsApiDisplayItemStatus
    */
    readonly wmConsumerChannelType?: string
    
}

/**
 * Request parameters for getFeedStatus operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedStatusRequest
 */
export type FeedsApiGetFeedStatusRequest = {
    
    /**
    * A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: \'...3456@789...\' must be entered in the URL as \'...3456%40789).
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly feedId: string
    
    /**
    * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmQosCorrelationId: string
    
    /**
    * Walmart Service Name
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmSvcName: string
    
    /**
    * The Epoch timestamp
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmSecTimestamp: string
    
    /**
    * The vendor\'s digital signature, generated by running the JAR file or custom generation code
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmSecAuthSignature: string
    
    /**
    * A unique ID required to access the API
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmConsumerId: string
    
    /**
    * Includes details of each entity in the feed. Do not set this parameter to true.
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly includeDetails?: string
    
    /**
    * The object response to the starting number, where 0 is the first entity that can be requested.
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly offset?: string
    
    /**
    * The number of entities to be returned. Maximum 20 entities.
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly limit?: string
    
    /**
    * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
    * @type {string}
    * @memberof FeedsApiGetFeedStatus
    */
    readonly wmConsumerChannelType?: string
    
}

/**
 * FeedsApiGenerated - object-oriented interface
 * @export
 * @class FeedsApiGenerated
 * @extends {BaseAPI}
 */
export class FeedsApiGenerated extends BaseAPI {
    /**
     * You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB to ensure optimal feed processing time.
     * @summary Content feeds
     * @param {FeedsApiCreateContentFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiGenerated
     */
    public createContentFeed(requestParameters: FeedsApiCreateContentFeedRequest, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).createContentFeed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rich Media includes material such as videos, comparison tables, and view360 media which is item-specific.
     * @summary Rich Media
     * @param {FeedsApiCreateRichMediaFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiGenerated
     */
    public createRichMediaFeed(requestParameters: FeedsApiCreateRichMediaFeedRequest, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).createRichMediaFeed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can display an item status for a specific feed ID. Use the feed ID returned from the upload an item feed API.
     * @summary Feed status
     * @param {FeedsApiDisplayItemStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiGenerated
     */
    public displayItemStatus(requestParameters: FeedsApiDisplayItemStatusRequest, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).displayItemStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can display the status of all items for a specific feed ID. Use the feed ID returned from the upload an item feed API.
     * @summary Feed item status
     * @param {FeedsApiGetFeedStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiGenerated
     */
    public getFeedStatus(requestParameters: FeedsApiGetFeedStatusRequest, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).getFeedStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
